#############################################################
# Filename: ~/.zshrc
#     About: init script of zsh
#     Maintained by xiaming.cxm
#     2022-07-25
#
# Install:
#     mkdir -p ~/.zi
#     git clone https://github.com/z-shell/zi.git ~/.zi/bin
#############################################################

#+++++++++++++++++++++++++++++++++++++++
# FUNCTIONS
#+++++++++++++++++++++++++++++++++++++++

# Reload zshrc
function zshld {
    myextdir=$(basename $(echo "${MYEXT_HOME}" | sed -E -n "s|(.*[^/])/?|\1|p"))
    if [ -e $HOME/.zi ]; then
        ls -d $HOME/.zi/snippets/* | grep "$myextdir" | xargs rm -rf
    fi
    source $HOME/.zshrc
}

# Load my extensions under $MYEXT_HOME
function _load_my_zsh_extensions {
    if [ -e ${MYEXT_HOME} ]; then
        # Load plugins
        for plugin in $(ls -d $MYEXT_HOME/*); do
            zi load $plugin
        done
        # Load plain zsh scripts
        for i in `find ${MYEXT_HOME} -maxdepth 1 -type f -name "*.zsh"`; do
            zi snippet $i;
        done
    fi
}

# start or access tmux dev session
function bingo {
    unset TMUX
    HOSTNAME=$(hostname | sed -E "s/\./_/g" | head -c 8)
    tmux -u start-server
    tmux -u has-session -t $HOSTNAME
    if [ $? != 0 ]; then
        tmux -u new-session -d -s $HOSTNAME
    fi
    tmux -u attach -t $HOSTNAME
}

# Prune all docker junk data
function docker_prune_all {
    yes y | docker container prune
    yes y | docker image prune
    yes y | docker volume prune
}

# Remove deleted file from git cache
function gitrmdeleted {
    FILES=$(git ls-files -d)
    if [[ ! -z $FILES ]]; then
        git rm $FILES
    else
        echo "No deleted files"
    fi
}

# Remove git submodule
function gitrmsubmod {
    SUBMODULE=$1
    git submodule deinit -f -- $SUBMODULE
    rm -rf .git/modules/$SUBMODULE
    git rm -f $SUBMODULE
}

# Docker image tag generator
function genimgver {
    TAG="${1:-notag}"
    MODE="${2:-release}"
    echo ${MODE}_$(date +"%Y%m%d%H%M%S")_${TAG}_$(git rev-parse HEAD | head -c 8)
}

# Open file window
function openw {
    KNAME=$(uname -s)
    KREL=$(uname -r)
    EXE='nautilus'
    if [[ $KNAME == "Linux" ]]; then
        if [[ $KREL =~ "microsoft-standard" ]]; then
            EXE='explorer.exe'
        fi
    elif [[ $KNAME == "Darwin"  ]]; then
        EXE='open'
    fi
    $EXE $@
}

# Proxy triggers
function enableProxy {
    export OLD_PROMPT="$PROMPT"
    HHOST="${PROXY_HTTP_HOST:-127.0.0.1}"
    HPORT="${PROXY_HTTP_PORT:-7890}"
    SPORT="${PROXY_SOCKS_PORT:-7891}"
    if [[ $(uname -r) =~ "microsoft-standard" ]]; then
        PROXYH=$(/mnt/c/Windows/system32/ipconfig.exe /all |
            sed -n -E "s|.*IPv4 Address.*([0-9]{3}(\.[0-9]*){3})\(Preferred\)|\1|p" |
            grep 192.168.0 |
            tr -d '\r\n\t[:blank:]')
    fi
    export http_proxy="http://${HHOST}:${HPORT}" \
        https_proxy="http://${HHOST}:${HPORT}" \
        all_proxy="socks5://${HHOST}:${SPORT}"
    export PROMPT="[P] $PROMPT"
}

function disableProxy {
    export PROMPT=$OLD_PROMPT
    unset http_proxy
    unset https_proxy
    unset OLD_PROMPT
}

# Consume 15% startup time
function _initPyenv {
    if [ -e "$HOME/.pyenv" ]; then
        export PYENV_ROOT="$HOME/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        if command -v pyenv 1>/dev/null 2>&1; then
            # Load pyenv automatically
            eval "$(pyenv init --path)"
        fi
    fi
}

function _initJenv {
    if [ -e "$HOME/.jenv" ]; then
        export PATH="$HOME/.jenv/bin:$PATH"
        if command -v jenv 1>/dev/null 2>&1; then
            eval "$(jenv init -)"
        fi
    fi
}

function _initRBenv {
    if [ -e "$HOME/.rbenv" ]; then
        export PATH="$HOME/.rbenv/bin:$PATH"
        if command -v rbenv 1>/dev/null 2>&1; then
            eval "$(rbenv init - zsh)"
        fi
    fi
}

function _initGoenv {
    GOROOT=${GOROOT:-/usr/local/go}
    if [ -e $GOROOT ]; then
        export GOROOT=$GOROOT
        export PATH=$PATH:$GOROOT/bin
    fi
    if command -v go &>/dev/null; then
        export GOPATH=$(go env GOPATH)
        export PATH=$PATH:$GOPATH/bin
        export GO111MODULE=on
        export GOPROXY=https://mirrors.aliyun.com/goproxy/,direct
    fi
}

function _initRustEnv {
    if command -v rustc &>/dev/null; then
        export RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static
        export RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup
    fi
    if [ -e "$HOME/.cargo" ]; then
        export PATH="$HOME/.cargo/bin":$PATH
    fi
}

function _initCuda {
    if [ -e "/usr/local/cuda" ]; then
        export PATH="/usr/local/cuda/bin$PATH"
        export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
    fi
}

function _initMacEnv {
    # homebrew
    brew_installed=(python3 gcc) #***
    if command -v brew &>/dev/null; then
        for i in ${brew_installed[@]}; do
            INSTALLED_HOME=$(brew --prefix ${i})
            if [[ "x$?" == "x0" ]]; then
                export PATH=$INSTALLED_HOME/bin:$PATH
            fi
        done
    fi
    # macports
    export PATH="/opt/local/bin:/opt/local/sbin:$PATH"
    export C_INCLUDE_PATH="/opt/local/include:$C_INCLUDE_PATH"
    export LD_LIBRARY_PATH="/opt/local/lib:$LD_LIBRARY_PATH"
}

function _initHaskellEnv {
    if [ -e "$HOME/.ghcup" ]; then
        export PATH="$HOME/.ghcup/bin:$PATH"
    fi
    if [ -e "$HOME/.cabal" ]; then
        export PATH="$HOME/.cabal/bin:$PATH"
    fi
}

#+++++++++++++++++++++++++++++++++++++++
# Basics and commons
#+++++++++++++++++++++++++++++++++++++++

# Editor
export EDITOR=nvim

# zsh history
export HISTFILE=$HOME/.zhistory
export HISTSIZE=9999
export SAVEHIST=9999

# Diagnose perf
PROFILE_PERF=0
if [[ ${PROFILE_PERF} == 1 ]]; then
    zmodload zsh/zprof
fi

# zsh bundled
autoload -U parseopts
autoload -U zargs
autoload -U zcalc
autoload -U zed
autoload -U zmv
autoload -U compinit


#+++++++++++++++++++++++++++++++++++++++
# ZI manager
#+++++++++++++++++++++++++++++++++++++++

# Init zi manager
ZI_HOME="${HOME}/.zi"
MYEXT_HOME="${HOME}/.config/zsh_myext"
source "${ZI_HOME}/bin/zi.zsh"

autoload -Uz _zi
(( ${+_comps}  )) && _comps[zi]=_zi

# OMZ libs
zi snippet OMZL::clipboard.zsh
zi snippet OMZL::compfix.zsh
zi snippet OMZL::completion.zsh
zi snippet OMZL::correction.zsh
zi snippet OMZL::directories.zsh
zi snippet OMZL::functions.zsh
zi snippet OMZL::git.zsh
zi snippet OMZL::spectrum.zsh
zi snippet OMZL::theme-and-appearance.zsh

# Efficiency
zi snippet OMZP::alias-finder
zi snippet OMZP::extract
zi snippet OMZP::vi-mode
zi snippet OMZP::fzf

zi ice pick"z.sh"
zi load rupa/z

# Colored
zi snippet OMZP::colored-man-pages

# Dev
zi snippet OMZP::git
zi snippet OMZP::gitignore
zi snippet OMZP::mvn

# Web
zi snippet OMZP::urltools

# Python
_initPyenv
zi snippet OMZP::pyenv
zi snippet OMZP::virtualenv

# Theme
zi cdclear -q
setopt promptsubst
#zi snippet OMZT::robbyrussell
zi snippet OMZT::jtriley
zi snippet OMZP::themes

# Completion
zi ice pick"zsh-history-substring-search.zsh"
zi load zsh-users/zsh-history-substring-search

zi ice pick"src"
zi load zsh-users/zsh-completions
fpath=($HOME/.zi/plugins/zsh-users---zsh-completions/src $fpath)

# Fish-shell likes
zi ice pick"zsh-autosuggestions.zsh"
zi load zsh-users/zsh-autosuggestions
zi ice pick "zsh-syntax-highlighting.zsh"
zi load zsh-users/zsh-syntax-highlighting

# my extensions
_load_my_zsh_extensions

# Profiling perf
if [[ ${PROFILE_PERF} == 1 ]]; then
    zprof
fi

#+++++++++++++++++++++++++++++++++++++++
# ALIAS
#+++++++++++++++++++++++++++++++++++++++

# Use nvim as default
alias vi=nvim
alias tmux='tmux -u' #unicode-mode to fix nerdfont

# Common
alias duh="du -hs .[^.]*"
alias em='emacs'
alias diff='diff -r'

# configs
alias ccvi='${=EDITOR} $HOME/.vimrc'
alias ccnv='${=EDITOR} $HOME/.config/nvim/init.vim'
alias ccnv2='${=EDITOR} $HOME/.config/nvim/init.lua'
alias cczsh='${=EDITOR} $HOME/.zshrc'
alias cczrc='${=EDITOR} $HOME/.zshrc'
alias ccze='${=EDITOR} $HOME/.zshenv'
alias cctmux='${=EDITOR} $HOME/.tmux.conf'
alias ccclash='${=EDITOR} $HOME/.config/clash/config.yaml'

# batch
alias team="pssh -i -h $HOME/.pssh_hosts"

# Proxy shortcut
alias pc="/usr/local/bin/proxychains4 -q"

# Git
alias ga="git add"
alias gb="git branch"
alias gba="git branch -av"
alias gd="git diff --ws-error-highlight=all"
alias gdc="git diff --cached"
alias ghf="git log --follow -p --"
alias grsh="git reset --soft HEAD^ && git reset --hard HEAD"
alias gsrh="git submodule foreach --recursive git reset --hard"

# java
alias cfr="java -jar ~/bin/cfr-0.152.jar"

# cmake with compile_commands.json output
alias cmake="cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1"

# Perf
alias psmem="ps -o pid,user,%mem,command ax | sort -b -k3 -r"

#+++++++++++++++++++++++++++++++++++++++
# PLUGINS
#+++++++++++++++++++++++++++++++++++++++

if [ -e "$HOME/.fzf.zsh" ]; then
    source ~/.fzf.zsh
fi


#+++++++++++++++++++++++++++++++++++++++
# DEVTOOLS
#+++++++++++++++++++++++++++++++++++++++

_initJenv
_initRBenv
_initGoenv
_initRustEnv
_initCuda
_initHaskellEnv
if [[ $OSTYPE == darwin*  ]]; then
    _initMacEnv
fi


#+++++++++++++++++++++++++++++++++++++++
# USER-DEFINED Afterwards
#+++++++++++++++++++++++++++++++++++++++
